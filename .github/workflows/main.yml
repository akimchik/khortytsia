name: Khortytsia CI/CD

on:
  workflow_dispatch:
  push:
    branches:
      - main

jobs:
  test-and-deploy:
    runs-on: ubuntu-latest
    env:
      TF_VAR_GCP_PROJECT_ID: ${{ secrets.GCP_PROJECT_ID }}
      TF_VAR_EMAIL_FROM: ${{ secrets.TF_VAR_EMAIL_FROM }}
      TF_VAR_EMAIL_TO: ${{ secrets.TF_VAR_EMAIL_TO }}

    steps:
      - name: Checkout code
        uses: actions/checkout@v3

      - name: Set up Node.js
        uses: actions/setup-node@v3
        with:
          node-version: '20'

      - name: Authenticate to Google Cloud
        uses: 'google-github-actions/auth@v1'
        with:
          credentials_json: '${{ secrets.GCP_SA_KEY }}'

      - name: Set up Google Cloud SDK
        uses: google-github-actions/setup-gcloud@v1
        with:
          project_id: ${{ secrets.GCP_PROJECT_ID }}



      - name: Set up Terraform
        uses: hashicorp/setup-terraform@v2
        with:
          terraform_version: 1.2.5

      - name: Run All Unit & Security Tests
        uses: ./.github/actions/run-all-tests


      - name: Terraform Init
        run: terraform init -reconfigure -input=false
        working-directory: ./pipeline

      - name: Create Source Bucket
        id: create_bucket
        run: terraform apply -target=google_storage_bucket.source_bucket -auto-approve -input=false
        working-directory: ./pipeline

      - name: Detect Changed Functions
        id: changed-functions
        run: |
          CHANGED_FUNCTIONS=""
          for dir in */; do
            if [ -f "$dir/package.json" ]; then
              # Check for changes in the function directory compared to the last commit on main
              if git diff --quiet HEAD^ HEAD -- "$dir"; then
                echo "No changes in $dir"
              else
                echo "Changes detected in $dir"
                CHANGED_FUNCTIONS="$CHANGED_FUNCTIONS $dir"
              fi
            fi
          done
          echo "::set-output name=functions::$CHANGED_FUNCTIONS"

      - name: Package and Upload Source Code
        if: steps.changed-functions.outputs.functions != ''
        run: |
          BUCKET_NAME="${{ secrets.GCP_PROJECT_ID }}-source-code"
          for FUNCTION in ${{ steps.changed-functions.outputs.functions }}; do
            echo "Packaging $FUNCTION..."
            cd "$FUNCTION"
            zip -r "../${FUNCTION%/}.zip" .
            cd ..
            echo "Uploading ${FUNCTION%/}.zip to gs://$BUCKET_NAME/"
            gsutil cp "${FUNCTION%/}.zip" "gs://$BUCKET_NAME/${FUNCTION%/}.zip"
          done

      - name: Deploy Logging and Notification Resources
        id: deploy_logging
        run: |
          cd pipeline
          terraform apply -auto-approve -input=false -target=google_logging_metric.manual_review_metric -target=google_monitoring_notification_channel.email_channel

      - name: Deploy Functions and Remaining Infrastructure
        if: steps.changed-functions.outputs.functions != ''
        id: deploy_infra
        run: |
          cd pipeline
          # Add a sleep to allow the new metric to propagate
          sleep 60
          TARGETS=""
          for FUNCTION in ${{ steps.changed-functions.outputs.functions }}; do
            TARGETS="$TARGETS -target=module.functions[\"${FUNCTION%/}\"]"
          done
          terraform apply -auto-approve -input=false $TARGETS
